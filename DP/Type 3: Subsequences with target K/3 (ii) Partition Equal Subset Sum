//canPartitionRecur (arr, n, firstSusetSum, SecondSubsetSum) => if there is equal partition sum from 0 to nth index.

bool canPartitionRecur(vector<int> &arr, int n, int firstSubsetSum, int secondSubsetSum){
	
	if(n < 0) return firstSubsetSum == secondSubsetSum;
	bool goesToFirstSusbset = canPartitionRecur(arr,n-1, firstSubsetSum+arr[n], secondSubsetSum);
	bool goesToSecondSubset = canPartitionRecur(arr,n-1, firstSubsetSum, secondSubsetSum+arr[n]);
	return goesToFirstSusbset || goesToSecondSubset;
}
bool canPartition(vector<int> &arr, int n)
{
	return canPartitionRecur(arr, n-1, 0 ,0);
	// Write your code here.
}
---------------------------------------------------------------
tabulated : better than only 10%


// tabulation is a form of 3(i), instead of a target we have sum/2.
bool canPartition(vector<int> &arr, int n)
{
	int sum = 0;
	for(int i: arr)sum+=i;
	if(sum%2 != 0) return false;
	vector<vector<bool>> dp(n, vector<bool>(sum/2 +1, false));
	
	//base cases begin
	for(int i=0; i<n; i++)dp[i][0]=true;   //we have reacged the target
	dp[0][arr[0]] = true;  //we have reache dthe first index which is a boundary, now remaining target should be equal to the residual.
	//base cases end

	for(int i=1 ;i<n;i++){
		for(int j=1;j< sum/2 + 1 ;j++){
			bool notTake = dp[i-1][j];
			bool take = false;
			if(j >= arr[i]) take = dp[i-1][j-arr[i]];
			dp[i][j]=take || notTake;
		}
	}
	
	return dp[n-1][sum/2];
	//return canPartitionRecur(arr, n-1, 0 ,0);
	// Write your code here.
}

