int findWaysRecur(vector<int> &arr, int index, int target){
	//base case begin
	if(index < 0 && target != 0)return 0;       //take a look at the base cases again.
	else if(target == 0)return 1; 
	//base cases end
	int notTaken = findWaysRecur(arr, index-1, target);
	int taken = 0;
	if(arr[index] <= target)taken = findWaysRecur(arr, index-1, target-arr[index]);
	return taken + notTaken;

}
int findWays(vector<int>& arr, int k)
{
	return findWaysRecur(arr, arr.size()-1, k);
	// Write your code here.
}
-------------------------------------------------------------------
Note : use of modulo should be researched!

int findWays(vector<int>& arr, int k)
{
	int n = arr.size();
	vector<vector<int>> dp(n, vector<int> (k+1, 0));
	//base cases begin
	for(int i=0;i <n;i++)dp[i][0]=1;
	if(arr[0] <= k)dp[0][arr[0]] = 1;
	//base cases end
	for(int i=1;i<n;i++){
		for(int j=1;j<=k;j++){
			int notTaken = dp[i-1][j];
			int taken =0;
			if(arr[i] <= j) taken = dp[i-1][j-arr[i]];
			dp[i][j] = (taken + notTaken) % MOD;   //how is this important and how does it prevent integer overflows.
		}
	}
	return dp[n-1][k];
	// return findWaysRecur(arr, arr.size()-1, k);
	// Write your code here.
}
