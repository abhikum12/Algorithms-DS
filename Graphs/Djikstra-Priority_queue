#include <iostream>
using namespace std;
#include<bits/stdc++.h>
#define INF 0x3f3f3f3f
typedef pair<int,int>  p;
 //DJIkstra cannot function for negative edges.
 //If a constant C is added to every weight, the algo fails.
 /




void addedge(vector<p> adj[],int a, int b, int w){
	adj[a].push_back({b,w});
	adj[b].push_back({a,w});
}
void djikstra(vector<p> adj[],int s,vector<int> &dist,int V){
	//vector<int> dist(V,INF);
	priority_queue<p,vector<p>,greater<p>> pq;
	pq.push({0,s});
	dist[s]=0;
	while(!pq.empty()){
		int start=pq.top().second;
		pq.pop();
		for(auto i:adj[start]){
			int end=i.first;
			int weight=i.second;
			if(dist[end]>dist[start]+weight){
				dist[end]=dist[start]+weight;
				pq.push({dist[end],end});
			}
		}
	}
	//return dist;
}
	
int main() {
	
	int V=4;
	//int V=4;
	vector<int> dist(V,INT_MAX);
	
	
	vector<p> adj[V];
	addedge(adj,0,1,2);
	addedge(adj,1,3,4);
	addedge(adj,0,2,5);
	addedge(adj,2,3,2);
	djikstra(adj,0,dist,4);
	for(int i=0;i<V;i++)cout<< i <<" " << dist[i] << endl;
	
	// your code goes here
	return 0;
}
